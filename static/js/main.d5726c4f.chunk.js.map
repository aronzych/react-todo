{"version":3,"sources":["components/Task.js","components/TaskList.js","components/AddTask.js","components/App.js","serviceWorker.js","index.js"],"names":["Task","props","task","text","id","important","complete","date","completeDate","className","onClick","deleteTask","completeTask","TaskList","completeTasks","tasks","filter","map","key","reverse","todoTasks","minDate","Date","toISOString","slice","AddTask","state","value","checked","calendar","error","handleChange","e","setState","target","handleCheck","prev","handleCalendar","handleSubmit","preventDefault","add","onSubmit","this","type","placeholder","onChange","min","role","Component","App","counter","addTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oOA8DeA,EA5DF,SAAAC,GAAU,IAAD,EAC0CA,EAAMC,KAA5DC,EADY,EACZA,KAAMC,EADM,EACNA,GAAIC,EADE,EACFA,UAAWC,EADT,EACSA,SAAUC,EADnB,EACmBA,KAAMC,EADzB,EACyBA,aAE7C,OAAKF,EAmCD,wBAAIG,UAAU,mBACZ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,kBAAkBN,GACjC,yBAAKM,UAAU,uDACZ,IADH,cAEcD,GAEd,yBAAKC,UAAU,gCACZ,IACD,4BACEA,UAAU,iBACVC,QAAS,kBAAMT,EAAMU,WAAWP,KAFlC,QAzCN,wBACEK,UACEJ,EACI,yCACA,mBAGN,yBAAKI,UAAU,OACb,yBAAKA,UAAU,OAAON,GACtB,yBAAKM,UAAU,mDACZ,IADH,cAEcF,GAEd,yBAAKE,UAAU,gCACb,4BACEA,UAAU,kBACVC,QAAS,kBAAMT,EAAMW,aAAaR,KAFpC,QAMA,4BACEK,UAAU,iBACVC,QAAS,kBAAMT,EAAMU,WAAWP,KAFlC,YCIGS,EA7BE,SAAAZ,GACf,IACMa,EADWb,EAAMc,MAAMC,QAAO,SAAAd,GAAI,OAAsB,IAAlBA,EAAKI,YAClBW,KAAI,SAAAf,GAAI,OACrC,kBAAC,EAAD,CAAMA,KAAMA,EAAMgB,IAAKhB,EAAKE,GAAIO,WAAYV,EAAMU,gBAEpDG,EAAcK,UAEd,IACMC,EADOnB,EAAMc,MAAMC,QAAO,SAAAd,GAAI,OAAsB,IAAlBA,EAAKI,YACtBW,KAAI,SAAAf,GAAI,OAC7B,kBAAC,EAAD,CACEA,KAAMA,EACNgB,IAAKhB,EAAKE,GACVO,WAAYV,EAAMU,WAClBC,aAAcX,EAAMW,kBAKxB,OAFAQ,EAAUD,UAGR,oCACE,4CACA,wBAAIV,UAAU,cAAcW,GAC5B,6BACA,0CACA,wBAAIX,UAAU,cAAcK,KCzB5BO,GAAU,IAAIC,MAAOC,cAAcC,MAAM,EAAG,IA0HnCC,E,2MAvHbC,MAAQ,CACNC,MAAO,GACPC,SAAS,EACTC,SAAUR,EACVS,OAAO,G,EAGTC,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZN,MAAOK,EAAEE,OAAOP,S,EAIpBQ,YAAc,SAAAH,GACZ,EAAKC,UAAS,SAAAG,GAAI,MAAK,CAAER,SAAUQ,EAAKR,a,EAG1CS,eAAiB,SAAAL,GACf,EAAKC,SAAS,CACZJ,SAAUG,EAAEE,OAAOP,S,EAIvBW,aAAe,SAAAN,GACbA,EAAEO,iBADgB,MAEmB,EAAKb,MAAlCC,EAFU,EAEVA,MAAOC,EAFG,EAEHA,QAASC,EAFN,EAEMA,SACpBF,GACF,EAAK1B,MAAMuC,IAAIb,EAAOC,EAASC,GAC/B,EAAKI,SAAS,CACZN,MAAO,GACPC,SAAS,EACTC,SAAUR,EACVS,OAAO,KAGT,EAAKG,SAAS,CACZH,OAAO,K,wEAMX,OACE,0BAAMW,SAAUC,KAAKJ,cA8BnB,yBAAK7B,UAAU,eAIb,2BACEkC,KAAK,OACLC,YAAY,kBACZnC,UAAU,eACVkB,MAAOe,KAAKhB,MAAMC,MAClBkB,SAAUH,KAAKX,eAEjB,2BACEY,KAAK,OACLlC,UAAU,eACVqC,IAAKzB,EACLO,QAASc,KAAKhB,MAAME,QACpBD,MAAOe,KAAKhB,MAAMG,SAClBgB,SAAUH,KAAKL,iBAEjB,yBAAK5B,UAAU,qBAAqBL,GAAG,iBACrC,4BACEK,UACEiC,KAAKhB,MAAME,QACP,iBACA,4BAENe,KAAK,SACLjC,QAASgC,KAAKP,aAEbO,KAAKhB,MAAME,QAAU,aAAe,cAEvC,4BAAQnB,UAAU,kBAAkBkC,KAAK,UAAzC,SAKHD,KAAKhB,MAAMI,OACV,yBAAKrB,UAAU,qBAAqBsC,KAAK,SAAzC,mC,GA/GYC,aCwFPC,G,uNArFbC,QAAU,E,EACVxB,MAAQ,CACNI,OAAO,EACPf,MAAO,I,EA4BTJ,WAAa,SAAAP,GACX,IAAIW,EAAK,YAAO,EAAKW,MAAMX,OAC3BA,EAAQA,EAAMC,QAAO,SAAAd,GAAI,OAAIA,EAAKE,KAAOA,KACzC,EAAK6B,SAAS,CAAElB,W,EAGlBH,aAAe,SAAAR,GACb,IAAMG,GAAO,IAAIe,MAAOC,cAAcC,MAAM,EAAG,IAC3CT,EAAK,YAAO,EAAKW,MAAMX,OAC3BA,EAAQA,EAAME,KAAI,SAAAf,GAKhB,OAJIA,EAAKE,KAAOA,IACdF,EAAKI,UAAW,EAChBJ,EAAKM,aAAeD,GAEfL,KAET,EAAK+B,SAAS,CAAElB,W,EAGlBoC,QAAU,SAACxB,EAAOC,EAASC,GACzB,IAAM3B,EAAO,CACXE,GAAI,EAAK8C,QACT/C,KAAMwB,EACNtB,UAAWuB,EACXtB,UAAU,EACVC,KAAMsB,EACNrB,aAAc,IAGVO,EAAK,sBAAO,EAAKW,MAAMX,OAAlB,CAAyBb,IACpC,EAAK+B,SAAS,CACZlB,UAGF,EAAKmC,W,wEAIL,OACE,yBAAKzC,UAAU,2DACb,wBAAIA,UAAU,aAAd,SACA,6BACA,kBAAC,EAAD,CAAS+B,IAAKE,KAAKS,QAASrB,MAAOY,KAAKhB,MAAMI,QAC9C,6BACA,kBAAC,EAAD,CACEf,MAAO2B,KAAKhB,MAAMX,MAClBJ,WAAY+B,KAAK/B,WACjBC,aAAc8B,KAAK9B,oB,GA/EXoC,cCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.d5726c4f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Task = props => {\r\n  const { text, id, important, complete, date, completeDate } = props.task;\r\n\r\n  if (!complete) {\r\n    return (\r\n      // <ListGroup.Item className={important ? \"list-group-item list-group-item-warning\" : \"list-group-item list-group-item-primary\"}>\r\n      <li\r\n        className={\r\n          important\r\n            ? \"list-group-item list-group-item-danger\"\r\n            : \"list-group-item\"\r\n        }\r\n      >\r\n        <div className=\"row\">\r\n          <div className=\"col\">{text}</div>\r\n          <div className=\"col-xl-auto col-m text-right font-weight-bolder\">\r\n            {\" \"}\r\n            dead-line: {date}\r\n          </div>\r\n          <div className=\"col-xl-auto col-m text-right\">\r\n            <button\r\n              className=\"btn btn-success\"\r\n              onClick={() => props.completeTask(id)}\r\n            >\r\n              DONE\r\n            </button>\r\n            <button\r\n              className=\"btn btn-danger\"\r\n              onClick={() => props.deleteTask(id)}\r\n            >\r\n              &times;\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  } else {\r\n    return (\r\n      <li className=\"list-group-item\">\r\n        <div className=\"row\">\r\n          <div className=\"col text-muted\">{text}</div>\r\n          <div className=\"col-xl-auto col-m text-right text-muted font-italic\">\r\n            {\" \"}\r\n            completed: {completeDate}\r\n          </div>\r\n          <div className=\"col-xl-auto col-m text-right\">\r\n            {\" \"}\r\n            <button\r\n              className=\"btn btn-danger\"\r\n              onClick={() => props.deleteTask(id)}\r\n            >\r\n              X\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = props => {\r\n  const complete = props.tasks.filter(task => task.complete === true);\r\n  const completeTasks = complete.map(task => (\r\n    <Task task={task} key={task.id} deleteTask={props.deleteTask} />\r\n  ));\r\n  completeTasks.reverse();\r\n\r\n  const todo = props.tasks.filter(task => task.complete !== true);\r\n  const todoTasks = todo.map(task => (\r\n    <Task\r\n      task={task}\r\n      key={task.id}\r\n      deleteTask={props.deleteTask}\r\n      completeTask={props.completeTask}\r\n    />\r\n  ));\r\n  todoTasks.reverse();\r\n\r\n  return (\r\n    <>\r\n      <h2>uncompleted:</h2>\r\n      <ul className=\"list-group\">{todoTasks}</ul>\r\n      <hr />\r\n      <h2>completed:</h2>\r\n      <ul className=\"list-group\">{completeTasks}</ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\r\n\r\nconst minDate = new Date().toISOString().slice(0, 10);\r\n\r\nclass AddTask extends Component {\r\n  state = {\r\n    value: \"\",\r\n    checked: false,\r\n    calendar: minDate,\r\n    error: false\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      value: e.target.value\r\n    });\r\n  };\r\n\r\n  handleCheck = e => {\r\n    this.setState(prev => ({ checked: !prev.checked }));\r\n  };\r\n\r\n  handleCalendar = e => {\r\n    this.setState({\r\n      calendar: e.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { value, checked, calendar } = this.state;\r\n    if (value) {\r\n      this.props.add(value, checked, calendar);\r\n      this.setState({\r\n        value: \"\",\r\n        checked: false,\r\n        calendar: minDate,\r\n        error: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        error: true\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        {/* <label>\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.value}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={this.state.checked}\r\n            onChange={this.handleCheck}\r\n          />\r\n          important?\r\n        </label>\r\n        <label>\r\n          dead line:\r\n          <input\r\n            type=\"date\"\r\n            min={new Date().toISOString().slice(0, 10)}\r\n            checked={this.state.checked}\r\n            value={this.state.calendar}\r\n            onChange={this.handleCalendar}\r\n          />\r\n        </label>\r\n        <button className=\"btn btn-primary\" type=\"submit\">\r\n          add\r\n        </button> */}\r\n\r\n        <div className=\"input-group\">\r\n          {/* <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">New task:</span>\r\n          </div> */}\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Write a task...\"\r\n            className=\"form-control\"\r\n            value={this.state.value}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            type=\"date\"\r\n            className=\"form-control\"\r\n            min={minDate}\r\n            checked={this.state.checked}\r\n            value={this.state.calendar}\r\n            onChange={this.handleCalendar}\r\n          />\r\n          <div className=\"input-group-append\" id=\"button-addon4\">\r\n            <button\r\n              className={\r\n                this.state.checked\r\n                  ? \"btn btn-danger\"\r\n                  : \"btn btn-outline-secondary\"\r\n              }\r\n              type=\"button\"\r\n              onClick={this.handleCheck}\r\n            >\r\n              {this.state.checked ? \"Important!\" : \"Important?\"}\r\n            </button>\r\n            <button className=\"btn btn-success\" type=\"submit\">\r\n              Add\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {this.state.error && (\r\n          <div className=\"alert alert-danger\" role=\"alert\">\r\n            Task field can't be empty!\r\n          </div>\r\n        )}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React, { Component } from \"react\";\r\nimport TaskList from \"./TaskList\";\r\nimport AddTask from \"./AddTask\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  counter = 0;\r\n  state = {\r\n    error: false,\r\n    tasks: [\r\n      // {\r\n      //   id: 1,\r\n      //   text: \"Zrobić zupę\",\r\n      //   important: true,\r\n      //   complete: false,\r\n      //   date: \"30-01-2000\",\r\n      //   completeDate: \"\"\r\n      // },\r\n      // {\r\n      //   id: 2,\r\n      //   text: \"Kupić twaróg\",\r\n      //   important: false,\r\n      //   complete: false,\r\n      //   date: \"30-01-2000\",\r\n      //   completeDate: \"\"\r\n      // },\r\n      // {\r\n      //   id: 3,\r\n      //   text: \"Umyć psa\",\r\n      //   important: false,\r\n      //   complete: true,\r\n      //   date: \"30-01-2000\",\r\n      //   completeDate: \"30-01-2001\"\r\n      // }\r\n    ]\r\n  };\r\n\r\n  deleteTask = id => {\r\n    let tasks = [...this.state.tasks];\r\n    tasks = tasks.filter(task => task.id !== id);\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  completeTask = id => {\r\n    const date = new Date().toISOString().slice(0, 10);\r\n    let tasks = [...this.state.tasks];\r\n    tasks = tasks.map(task => {\r\n      if (task.id === id) {\r\n        task.complete = true;\r\n        task.completeDate = date;\r\n      }\r\n      return task;\r\n    });\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  addTask = (value, checked, calendar) => {\r\n    const task = {\r\n      id: this.counter,\r\n      text: value,\r\n      important: checked,\r\n      complete: false,\r\n      date: calendar,\r\n      completeDate: \"\"\r\n    };\r\n\r\n    const tasks = [...this.state.tasks, task];\r\n    this.setState({\r\n      tasks\r\n    });\r\n\r\n    this.counter++;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container container-md shadow p-3 mb-5 bg-white rounded\">\r\n        <h1 className=\"display-3\">Todos</h1>\r\n        <hr />\r\n        <AddTask add={this.addTask} error={this.state.error} />\r\n        <hr />\r\n        <TaskList\r\n          tasks={this.state.tasks}\r\n          deleteTask={this.deleteTask}\r\n          completeTask={this.completeTask}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}